# $Id$
#
# Process this file with autoconf to produce a configure script.
AC_INIT
AC_CONFIG_SRCDIR([src/gschem.c])
AC_PREREQ(2.54)

PACKAGE=geda-gschem
VERSION=20061020
echo Configuring $PACKAGE version $VERSION

# Initialize automake 
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_CONFIG_HEADER([config.h])

# Initialize maintainer mode
AM_MAINTAINER_MODE


#########################################################################
# Command line flags start
# 
# --disable-stroke : turn off stroke support
AC_ARG_ENABLE(stroke,
    [  --disable-stroke       Disable stroke support (don't use LibStroke at all)], [ if test $enableval = "no"; then
	 no_stroke=yes
        fi ])

# --disable-gd : turn off libgd support
AC_ARG_ENABLE(gd,
    [  --disable-gd        Disable libgd support (don't use libgd at all)], [ if test $enableval = "no"; then
	    no_gd=yes
           fi ])

# Change default location for rc files
AC_ARG_WITH(rcdir, [  --with-rcdir=path       Change where the system-*rc files are installed], [opt_rcdir=$withval])

# Allow the user to specify where there libstroke library lives
AC_ARG_WITH(stroke, [  --with-stroke=DIR       Tell configure where to find libstroke], [opt_stroke=$withval])

# 
# Command line flags end
#########################################################################

#########################################################################
# 
# Misc win32 / mingw checks and variables start
AC_CANONICAL_HOST

# Figure out if we are building on win32 and what environment.
case $host_os in
  *mingw32* ) echo "Configuring for mingw"; MINGW=yes ;;
esac

if ! test "$MINGW" = "no" -o "$MINGW"x = x; then
   MINGW="yes"
   PATHSEP=\\\\
   OTHERPATHSEP=/
else
   # Unix host
   MINGW="no"
   PATHSEP=/
   OTHERPATHSEP=\\\\
fi

# 
# Misc win32 / mingw checks and variables end
#########################################################################

# Checks for programs.
AC_PROG_CC
AM_CONDITIONAL(CCISGCC, test "$GCC" = "yes")    
AC_PROG_CPP
AC_PROG_MAKE_SET

############################################################################
# Check for guile start
# Do a very basic guile test, as the bulk of the flags will come from 
# libgeda.pc

GUILE_FLAGS

# Manually search for guile-config.  This is provided by GUILE_PROGS, but
# guile-1.4 does not have GUILE_PROGS, so we have to do it manually.
AC_PATH_PROG(GUILE_CONFIG,guile-config)
if test "$GUILE_CONFIG" = "" ; then
    AC_MSG_ERROR([guile-config required but not found])
fi
AC_SUBST(GUILE_CONFIG)

GUILE_VERSION=`$GUILE_CONFIG info guileversion`

#
# Check for guile end
############################################################################

############################################################################
# Check for mics things start
# 
# Checking for rint in math library
AC_CHECK_LIB(m, rint, AC_DEFINE(HAS_RINT, 1, [If your math library has rint in it, define this]), no_RINT="yes")

# Checking for dynamic lib
AC_CHECK_LIB(dl, dlopen, DL_LIB="-ldl", DL_LIB="")
#
# Check for mics things start
############################################################################

############################################################################
# Check for X11 start
# 

if test "$MINGW" = "no"
then
   AC_PATH_X
   AC_PATH_XTRA 
    
   X_EXTRA_LIBS="$X_EXTRA_LIBS"
   X_LDFLAGS="$X_LDFLAGS $X_LIBS $X_EXTRA_LIBS $X_PRE_LIBS -lX11 -lm"

   _use_rpath=no
   AC_MSG_CHECKING([if hardcoding of the X11 runtime library path is desired])
   AC_ARG_ENABLE([rpath],
       [  --enable-rpath         Enable hardcoding the X11 runtime library path [default=disabled]],
       [
        if test "X$enable_rpath" = "Xno" ; then
           AC_MSG_RESULT([no])
	   _use_rpath=no
        else
           AC_MSG_RESULT([yes])
           _use_rpath=yes
        fi
       ],
       [
           AC_MSG_RESULT([no])
           _use_rpath=no
       ])

   if test "X$_use_rpath" = "Xyes" ; then
      # Try to figure out if we need -Rpath for finding X11 libs
      # at runtime.  Why autoconf doesn't already do this, I don't
      # know...
      xlib_path=""
      for p in $X_LDFLAGS ; do
            case $p in
	    -L*)
		xlib_path="$xlib_path $p"
		;;
		esac
      done

      _save_LIBS=$LIBS
      LIBS="$LIBS $X_LDFLAGS"
      rpath=""
      for fl in "-Wl,-rpath " "-Wl,--rpath " "-rpath " "--rpath " "-Wl,-R" "-R" "-R " ; do
	  xlib_rpath=`echo $xlib_path | sed "s/-L/$fl/g"`
	  LIBS="$_save_LIBS $X_LIBS $xlib_rpath"
	  AC_MSG_CHECKING([if the compiler accepts ${fl}path for runtime libraries])
	  AC_LINK_IFELSE([AC_LANG_PROGRAM()],
	  AC_MSG_RESULT([yes])
            rpath=$fl, 
	    AC_MSG_RESULT([no]))
	    test -n "$rpath" && break
      done
      if test -n "$rpath"; then
	 X_LDFLAGS="$X_LDFLAGS $xlib_rpath"
      fi
      LIBS=$_save_LIBS
   fi

fi

# 
# Check for X11 end
############################################################################

############################################################################
# Check for gtk+ 2.4 start
# 

# Check for pkg-config
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test $PKG_CONFIG = no; then
   AC_MSG_ERROR([Cannot find pkg-config, make sure it is installed and in your PATH])
fi

PKG_CHECK_MODULES(GTK24, gtk+-2.0 >= 2.4.0, GTK24="yes", no_GTK24="yes")

# This next bit of code figures out what gtk we need to use.
if test "$GTK24" = "yes"
then

   AC_DEFINE(HAS_GTK24, 1, [If gtk+ 2.4.x has been installed, define this])
   GTK_CFLAGS=$GTK24_CFLAGS
   GTK_LIBS=$GTK24_LIBS
   GTK_VERSION=`$PKG_CONFIG gtk+-2.0 --modversion`

   # Search for glib
   PKG_CHECK_MODULES(GLIB24, glib-2.0 >= 2.4.0, GLIB24="yes", no_GLIB24="yes")
   if test "$GLIB24" != "yes"
   then
       AC_MSG_ERROR([Cannot find glib 2.4.x, install it and rerun ./configure.])
   fi
   GLIB_CFLAGS=$GLIB24_CFLAGS
   GLIB_LIBS=$GLIB24_LIBS
   GLIB_VERSION=`$PKG_CONFIG glib-2.0 --modversion`

else
   GTK_VERSION=""
fi

if test "$GTK_VERSION" = ""
then
   AC_MSG_ERROR([Cannot find gtk+ 2.4.x or later, please install gtk+.])
fi

# 
# Check for gtk+ 2.4 end
############################################################################

############################################################################
# Check for libgeda start
# 
PKG_CHECK_MODULES(LIBGEDA, libgeda >= $VERSION, LIBGEDA="yes", 
                  no_LIBGEDA="yes")

if test "$LIBGEDA" = "yes" 
then
   LIBGEDA_VERSION=`$PKG_CONFIG libgeda --modversion`
else
   AC_MSG_ERROR([libgeda detection error: $LIBGEDA_PKG_ERRORS])
fi

# 
# Check for libgeda end
############################################################################

############################################################################
# Check for libgd start
# Do some very simple tests, as we just need to know if libgeda was
# built with libgd support.
#

if test "X$no_gd" != "Xyes"; then
	AC_MSG_CHECKING([if libgeda was compiled with gdlib])
	haslibgd=`$PKG_CONFIG --variable=LIBGEDA_HASGD libgeda`
	if test "$haslibgd" != "yes"; then
		AC_MSG_WARN([libgeda was not built with libgd png support.
gschem will use the builtin png support.  If you want libgd png support, you 
must recompile libgeda with gdlib support.])
		LIBGD=no
	else
		AC_MSG_RESULT([yes])
		LIBGD=yes
	fi
else
	LIBGD=no
fi


# 
# Check for libgd end
############################################################################


############################################################################
# Check for libstroke start
#

# user specified --with-stroke
if eval "test x$opt_stroke != x"; then
   LIBSTROKE_LIBS="-L$opt_stroke/lib"
   LIBSTROKE_CFLAGS="-I$opt_stroke/include"
fi

# only check if the user has not disable strokes
if test "$no_stroke" != "yes"; then
   save_cppflags="$CPPFLAGS"
   save_ldflags="$LDFLAGS"
   CPPFLAGS="$CPPFLAGS $LIBSTROKE_CFLAGS"
   LDFLAGS="$LDFLAGS $LIBSTROKE_LIBS"
   AC_CHECK_LIB(stroke, stroke_init, LIBSTROKE="yes", LIBSTROKE="no")
   CPPFLAGS="$save_cppflags"
   LDFLAGS="$save_ldflags"
fi

if test "$LIBSTROKE" = "yes"; then
   AC_DEFINE(HAS_LIBSTROKE, 1, [Define if you have libstroke installed])
   if eval "test x$opt_stroke = x"; then
       LIBSTROKE_LIBS="-lstroke"
       LIBSTROKE_CFLAGS=""
   else
       LIBSTROKE_LIBS="$LIBSTROKE_LIBS -lstroke"
       # LIBSTROKE_CFLAGS set above
   fi
fi

if test "$no_stroke" = "yes"; then
   echo "**                                **"
   echo "** Disabling libstroke by request **"
   echo "**                                **"
   LIBSTROKE_LIB=""
   LIBSTROKE_CFLAGS=""
   LIBSTROKE="no"
fi

#
# Check for libstroke end
############################################################################

############################################################################
# Check for doxygen, indent start
# 
# Doxygen is a utility for generating html and latex documentation
# from c source code files.

# search for Doxygen
AC_PATH_PROG(DOXYGEN, doxygen, no, ${PATH})

if test "$DOXYGEN" = "no"; then 
   # doxygen is not available on the system
   echo "** Cannot find Doxygen! **"
   echo "**   Documentation creation disabled    **"
   DOXYGEN=echo

   # prevent from weaving the nw files
   # but does not prevent from processing gschemdoc
   builddoc=false
else 
   # doxygen is available on the system.
   # now checking if the tools for Texinfo files processing
   # is installed.
   # The docs can be either processed to produce dvi, html or info
   # with texi2dvi, texi2html or makeinfo respectively
   # Note : these tests on makeinfo and texi2dvi are no more 
   #        needed as automake makes them for us

   # enable the creation of html and latex documents.
   builddoc=true
fi

# depending on variable builddoc, weaving is performed or not
# using conditionnal in docs/Makefile.in
AM_CONDITIONAL(BUILDDOC, test x$builddoc = xtrue)

# search for indent
AC_PATH_PROG(INDENT, indent, no, ${PATH})

if ! test "$INDENT" = "no"; then 
   indentversion=`$INDENT --version | grep GNU`
else 
   indentversion=
fi

if test "$INDENT" = "no" -o "$indentversion"x = x; then 
  AC_PATH_PROG(GINDENT, gindent, no, ${PATH})
  if test "$GINDENT" = "no"; then 
    echo "** Cannot find GNU indent or gindent, C code formatting disabled **"
    INDENT=echo
  else
    INDENT=$GINDENT
  fi
fi

# 
# Check for doxygen, indent end
#########################################################################

#########################################################################
# Check for groff start
# 

# search for groff
AC_PATH_PROG(GROFF, groff, no, ${PATH})
if test $GROFF = "no"; then
        echo "Cannot find groff, some documentation will not be created."
fi

# 
# Check for groff end
#########################################################################

#########################################################################
# Checks for header files start
# 
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_DIRENT
AC_CHECK_HEADERS(unistd.h string.h stdlib.h \
                 stdarg.h assert.h fcntl.h errno.h sys/param.h)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

# Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(getcwd strstr vsnprintf snprintf)

AC_MSG_CHECKING([for optarg in unistd.h])
AC_TRY_COMPILE(
[#include <unistd.h>],
[ char *string = optarg; int i = optind; ],
optarg_found=yes,
optarg_found=no)
AC_MSG_RESULT($optarg_found)

if test $optarg_found = yes; then
    AC_DEFINE(OPTARG_IN_UNISTD, 1, [Define if you have optarg in unistd.h])
fi

# 
# Checks for header files end
#########################################################################

#########################################################################
#

# ------------- dmalloc -------------------
dnl dmalloc checks
with_dmalloc="no"
AC_MSG_CHECKING([if dmalloc debugging should be enabled])
AC_ARG_ENABLE([dmalloc],
[  --enable-dmalloc        Compile and link with dmalloc for malloc debugging [[default=no]]],
[
if test "X$enable_dmalloc" != "Xno" ; then
        AC_MSG_RESULT([yes])
        AC_CHECK_HEADER(dmalloc.h,,
                AC_ERROR([You have requested dmalloc debugging but dmalloc.h could not be found]))
        AC_CHECK_LIB(dmalloc,main,,
                AC_ERROR([You have requested dmalloc debugging but -ldmalloc could not be found]))
        DMALLOC_LIBS="-ldmalloc"
        with_dmalloc="yes"
else
        AC_MSG_RESULT([no])
        DMALLOC_LIBS=""
fi
],
[
        AC_MSG_RESULT([no])
        DMALLOC_LIBS=""
])

# ------------- ElectricFence -------------------
dnl ElectricFence checks
with_efence="no"
AC_MSG_CHECKING([if ElectricFence debugging should be enabled])
AC_ARG_ENABLE([efence],
[  --enable-efence         Link with ElectricFence for malloc debugging [[default=no]]],
[
if test "X$enable_efence" != "Xno" ; then
        AC_MSG_RESULT([yes])
        AC_CHECK_LIB(efence,main,,
                AC_ERROR([You have requested ElectricFence debugging but -lefence could not be found]))
        with_efence="yes"
else
        AC_MSG_RESULT([no])
fi
],
[
AC_MSG_RESULT([no])
])

#
#########################################################################
#########################################################################
# gEDA/gaf specific setup start
#

DATADIR=gEDA
GEDADATADIR=$datadir/$DATADIR

if eval "test x$opt_rcdir = x"; then
	# path was not specified with --with-rcdir
        AC_DEFINE_UNQUOTED(GEDARCDIR, "none", [gEDA/gaf's rc directory])
	GEDARCDIR=$GEDADATADIR
else
	# path WAS specified with --with-rcdir
        AC_DEFINE_UNQUOTED(GEDARCDIR, "$opt_rcdir", [gEDA/gaf's rc directory])
	GEDARCDIR="$opt_rcdir"
fi

# Expand the prefix variable
# I don't like the way this is done, but it works (I hope).
if eval "test x$prefix = xNONE"; then
 dprefix=$ac_default_prefix
else
 dprefix=$prefix
fi

gedatopdir=$dprefix/share/$DATADIR
expandgedadatadir=`echo $gedatopdir`

gedadocdir=$dprefix/share/doc/geda-doc
# --with-docdir : tells where to store documentation if not default
AC_ARG_WITH(docdir,
    [  --with-docdir      Where to store documentation if not default.],
        gedadocdir=$withval)
expandgedadocdir=`echo $gedadocdir`
GEDADOCDIR=$expandgedadocdir
AC_SUBST(GEDADOCDIR)

# this has to be expanded ( no ${prefix} ) --
AC_DEFINE_UNQUOTED(GEDADATADIR, "$gedatopdir", [gEDA/gaf's data directory])
AC_DEFINE_UNQUOTED(VERSION, "$VERSION", [Currently running version of gEDA/gaf])

#
# gEDA/gaf specify things which need to setup
#########################################################################

# Initialized gettext 
AM_GNU_GETTEXT
AM_GNU_GETTEXT_VERSION([%INSTALLED_GETTEXT_VERSION%])

# Finally create the final CFLAGS and LDFLAGS for use in the makefiles
GSCHEM_CFLAGS="$LIBSTROKE_CFLAGS $LIBGEDA_CFLAGS"
GSCHEM_LDFLAGS="$LIBSTROKE_LIBS $LIBGEDA_LIBS $GTK_LIBS $X_LDFLAGS $DMALLOC_LIBS" 

# Makefile.in variable substitution
AC_SUBST(GSCHEM_CFLAGS)
AC_SUBST(GSCHEM_LDFLAGS)
AC_SUBST(GEDADATADIR)
AC_SUBST(GEDARCDIR)
AC_SUBST(PATHSEP)
AC_SUBST(OTHERPATHSEP)
AC_SUBST(GUILEINTERP)
AC_SUBST(INDENT)

# Create all the necessary derived files
AC_CONFIG_FILES([Makefile 
                m4/Makefile 
                po/Makefile.in 
                intl/Makefile 
		src/Makefile
		include/Makefile
		scheme/Makefile
		bitmap/Makefile
		scripts/Makefile
		examples/Makefile
		docs/Makefile
		lib/Makefile
		tests/Makefile
		lib/system-gschemrc ])


AC_OUTPUT

expandedGEDADATADIR=`eval "echo $GEDADATADIR"`
expandedGEDARCDIR=`eval "echo $GEDARCDIR"`
expandedGEDADOCDIR=`eval "echo $GEDADOCDIR"`

AC_MSG_RESULT([
** Configuration summary for $PACKAGE $VERSION:

   GTK+ library version:             $GTK_VERSION
   GUILE library version:            $GUILE_VERSION
   libgeda library version:          $LIBGEDA_VERSION
   libstroke library:                $LIBSTROKE
   libgd library:                    $LIBGD
   mingw build:                      $MINGW
   data directory:                   $expandedGEDADATADIR
   rc directory:                     $expandedGEDARCDIR
   documentation directory:          $expandedGEDADOCDIR
   dmalloc debugging:                $with_dmalloc
   ElectricFence debugging:          $with_efence
])
